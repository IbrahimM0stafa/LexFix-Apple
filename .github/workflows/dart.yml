name: iOS-ipa-build
on:
  workflow_dispatch:
jobs:
  build-ios:
    name: ðŸŽ‰ iOS Build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          architecture: x64
      
      # Clean iOS build artifacts
      - run: flutter clean
        working-directory: mobileapp
      
      # Run flutter pub get inside mobileapp
      - run: flutter pub get
        working-directory: mobileapp
      
      # Check Firebase versions and potentially downgrade if needed
      - name: Fix Firebase and Google Sign-In compatibility
        run: |
          cd mobileapp
          echo "Current Firebase dependencies:"
          grep firebase pubspec.yaml
          
          # Use compatible versions that work together
          echo "Updating to compatible Firebase and Google Sign-In versions..."
          sed -i '' 's/firebase_core: \^3.14.0/firebase_core: ^2.24.2/' pubspec.yaml
          sed -i '' 's/firebase_messaging: \^15.2.7/firebase_messaging: ^14.7.10/' pubspec.yaml
          sed -i '' 's/cloud_firestore: \^5.6.9/cloud_firestore: ^4.13.6/' pubspec.yaml
          sed -i '' 's/firebase_auth: \^5.6.0/firebase_auth: ^4.15.3/' pubspec.yaml
          sed -i '' 's/google_sign_in: \^6.1.6/google_sign_in: ^6.1.5/' pubspec.yaml
          
          echo "Updated dependencies:"
          grep -E "(firebase|google_sign_in)" pubspec.yaml
      
      # Run pub get again with updated Firebase versions
      - run: flutter pub get
        working-directory: mobileapp
      
      # Remove old pods and Podfile.lock
      - run: rm -rf Pods Podfile.lock
        working-directory: mobileapp/ios
      
      # Clean CocoaPods cache
      - run: pod cache clean --all
        working-directory: mobileapp/ios
      
      # Ensure Podfile exists
      - name: Ensure Podfile exists
        run: |
          cd mobileapp/ios
          if [ ! -f Podfile ]; then
            pod init
          fi
      
      # Create a backup and modify Podfile
      - name: Configure Podfile
        run: |
          cd mobileapp/ios
          cp Podfile Podfile.backup
          
          # Set iOS platform version
          if grep -q "platform :ios" Podfile; then
            sed -i '' "s/platform :ios.*/platform :ios, '12.0'/" Podfile
          else
            echo "platform :ios, '12.0'" >> Podfile
          fi
          
          # Add explicit pod version constraints before target
          if ! grep -q "pod 'GoogleUtilities'" Podfile; then
            # Create a temporary file with the pod constraints
            cat > pod_constraints.txt << 'EOF'
          # Explicit pod version constraints for compatibility
          pod 'GoogleUtilities', '~> 7.12'
          pod 'GoogleSignIn', '~> 7.0'
          
          EOF
            
            # Find the line with 'target' and insert the pod constraints before it
            sed -i '' '/^target /r pod_constraints.txt' Podfile
            rm pod_constraints.txt
          fi
          
          # Remove existing post_install if it exists and add our own
          if grep -q "post_install do" Podfile; then
            echo "Removing existing post_install hook..."
            sed -i '' '/post_install do/,/^end$/d' Podfile
          fi
          
          # Add our post_install block
          cat >> Podfile << 'EOF'
          
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
                config.build_settings['SWIFT_VERSION'] = '5.0'
              end
            end
            # Force compatible GoogleUtilities version
            installer.pods_project.targets.each do |target|
              if target.name == 'GoogleUtilities'
                target.build_configurations.each do |config|
                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'COCOAPODS=1'
                end
              end
            end
          end
          EOF
          
          echo "=== Final Podfile content ==="
          cat Podfile
      
      # Update CocoaPods repo & install pods
      - run: pod repo update
        working-directory: mobileapp/ios
      
      - run: pod install
        working-directory: mobileapp/ios
      
      # Build iOS app (no signing)
      - run: flutter build ios --release --no-codesign
        working-directory: mobileapp
      
      # Create Payload folder
      - run: mkdir Payload
        working-directory: mobileapp/build/ios/iphoneos
      
      # Move Runner.app into Payload/
      - run: mv Runner.app Payload/
        working-directory: mobileapp/build/ios/iphoneos
      
      # Zip the Payload into an IPA
      - name: Zip output
        run: |
          cd mobileapp/build/ios/iphoneos
          zip -r FlutterIpaExport.ipa Payload
      
      # Upload IPA to GitHub release
      - name: Upload IPA to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: mobileapp/build/ios/iphoneos/FlutterIpaExport.ipa
          asset_name: FlutterIpaExport.ipa
          tag: ios-build-${{ github.run_number }}
          overwrite: true
          body: |
            ðŸŽ‰ iOS IPA build artifact for run #${{ github.run_number }}
